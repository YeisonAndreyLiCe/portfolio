---
import type { CollectionEntry } from "astro:content";
import "../styles/base.css";
import Footer from "components/Footer.astro";
import Head from "components/Head.astro";
import Hero from "components/Hero.astro";
import TableOfContent from "components/TableOfContent.astro";
import Aside from "components/Aside.astro";

export interface Props {
  frontmatter: CollectionEntry<"blog">["data"];
  allPosts: CollectionEntry<"blog">[];
  headings: { slug: string; text: string; depth: number }[];
}

const {
  frontmatter: { title, description, pubDate, readingTime },
  headings,
  allPosts,
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <Head title={`${title} | post`} description={description} />
  <body>
    <Aside posts={allPosts} />
    <div id="main-content">
      <Hero
        pubDate={pubDate}
        readingTime={readingTime}
        description={description}
        title={title}
      >
        <TableOfContent headings={headings} />
      </Hero>
      <section>
        <slot />
      </section>
    </div>
    <Footer />
  </body>
</html>

<script>
  // JavaScript to highlight the active link in the table of contents
  document.addEventListener("DOMContentLoaded", () => {
    if (window.innerWidth < 1300) return;

    const headings = ["h1", "h2", "h3", "h4", "h5", "h6"];
    const titles = headings
      .map((heading) => Array.from(document.querySelectorAll(heading)))
      .flat();

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          console.log("Mobile device detected");

          const link = document.querySelector(
            `#article-content a[href="#${entry.target.id}"]`,
          );
          if (!link?.parentElement) return;
          if (entry.isIntersecting) {
            link.parentElement.classList.add("active");
          } else {
            link.parentElement.classList.remove("active");
          }
        });
      },
      {
        root: null,
        rootMargin: "0px",
        threshold: 0.5,
      },
    );

    titles.forEach((title) => observer.observe(title));
  });
</script>

<style>
  #main-content {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  section {
    padding: 10px;
    display: flex;
    flex-direction: column;
    gap: 16px;
    line-height: 25px;
  }

  @media screen and (min-width: 720px) {
    #main-content {
      gap: 16px;
      padding: 20px;
    }
  }

  @media screen and (min-width: 900px) {
    #main-content {
      margin-left: 150px;
      margin-right: 50px;
    }
  }

  @media screen and (min-width: 1300px) {
    #main-content {
      max-width: 1000px;
      margin-right: 350px;
      margin-left: 250px;
    }
  }
</style>
