---
import ThemeToggle from "components/ThemeToggle.astro";
import Icon from "components/Icon.astro";

interface Props {
  titles: string[];
}

const { titles } = Astro.props;
---

<header>
  <nav class="menu-hidden" id="navbar">
    <ul>
      <li id="logo"><a href="/">YALC</a></li>
      {
        titles.map((title) => (
          <li>
            <a href={"/" + title.toLocaleLowerCase().replace(/\s/g, "-")}>
              {title}
            </a>
          </li>
        ))
      }
    </ul>
    <ThemeToggle />
  </nav>
  <button id="toggle-show-menu">
    <Icon icon="list" size="35px" color="red" />
  </button>
</header>
<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const theme = getThemePreference();
  document.querySelector("html").setAttribute("data-theme", theme);

  // collapse and expand the menu on mobile
  const toggleShowMenu = document.getElementById("toggle-show-menu");
  const nav = document.querySelector("nav");
  const items = nav.innerHTML;

  toggleShowMenu.addEventListener("click", () => {
    nav.innerHTML = "";
    nav.classList.toggle("menu-hidden");
    if (!nav.classList.contains("menu-hidden")) {
      nav.innerHTML = items;
    }
  });

  const observer = new MutationObserver(() => {
    const themeToggle = document.getElementById("theme-toggle");
    if (themeToggle) {
      const setTheme = () => {
        const html = document.querySelector("html");
        if (!html) return;

        const theme =
          html.attributes.getNamedItem("data-theme")?.value ?? "dark";
        const newTheme = theme === "dark" ? "light" : "dark";

        html.setAttribute("data-theme", newTheme);
        localStorage.setItem("theme", newTheme);
      };
      themeToggle.addEventListener("click", setTheme);
    }
  });
  observer.observe(document.getElementById("navbar"), {
    attributes: true,
    attributeFilter: ["class"],
  });
</script>

<style>
  header {
    background-image: linear-gradient(45deg, var(--secondary), var(--primary));
    padding-top: 16px;
    padding-bottom: 16px;
    z-index: 1000;
    width: 100%;
  }

  #toggle-show-menu {
    display: block;
    margin-left: 20px;
    background-color: var(--contrast);
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .menu-hidden {
    visibility: hidden;
  }

  nav {
    width: 100%;
    background-color: var(--secondary);
    position: absolute;
    top: 70px;
    gap: 20px;
    padding-bottom:20px;
  }

  nav ul {
    display: flex;
    flex-direction: column;
    list-style-type: none;
    width: 100%;
    gap: 20px;
  }

  nav ul li {
    width: 100%;
    padding: 20px;
  }

  nav ul li a {
    color: var(--text-color);
    text-decoration: none;
  }

  nav ul li:hover {
    background-color: var(--contrast);
    color: var(--primary);
  }

  nav ul li a:hover {
    color: var(--primary);
  }

  @media screen and (min-width: 900px) {
    #toggle-show-menu {
      display: none;
      pointer-events: none;
    }

    header {
      display: flex;
      padding-left: 60px;
      padding-right: 60px;
      align-items: center;
      justify-content: center;
    }

    nav {
      max-width: 1000px;
      padding: unset;
      position: relative;
      top: unset;
      background-color: unset;
      display: flex;
      align-items: center;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }
    .menu-hidden {
      visibility: visible;
      position: sticky;
      top: 0;
    }

    nav ul {
      flex-direction: row;
      flex: 1;
      justify-content: space-around;
    }

    nav ul li {
      padding: unset;
    }

    nav ul li:hover {
      background-color: unset;
    }

    nav ul li a:hover {
      text-decoration: underline;
      color: var(--contrast);
    }
  }
</style>
